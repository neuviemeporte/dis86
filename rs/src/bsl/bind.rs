/* automatically generated by rust-bindgen 0.69.4 (and then modified by hand) */
pub use std::os::raw::{c_int, c_char, c_void};

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bsl {
    _unused: [u8; 0],
}

#[allow(non_camel_case_types)]
pub type bsl_t = bsl;
#[allow(non_camel_case_types)]
pub type bsl_iter_t = bsl_iter;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct bsl_iter {
    pub _opaque: [c_char; 32usize],
}

#[allow(unused)]
pub const BSL_SUCCESS: c_int = 0;
#[allow(unused)]
pub const BSL_ERR_PARSE: c_int = 1;

pub const BSL_TYPE_STR: c_int = 0;
pub const BSL_TYPE_NODE: c_int = 1;

extern "C" {
  pub fn bsl_parse_new(
    buf: *const c_char,
    sz: usize,
    opt_err: *mut c_int,
  ) -> *mut bsl_t;
}

extern "C" {
  pub fn bsl_delete(bsl: *mut bsl_t);
}
extern "C" {
  pub fn bsl_get_generic(
    bsl: *mut bsl_t,
    key: *const c_char,
    opt_type: *mut c_int,
  ) -> *mut c_void;
}
#[allow(unused)]
extern "C" {
  pub fn bsl_get_str(
    bsl: *mut bsl_t,
    key: *const c_char,
  ) -> *const c_char;
}
#[allow(unused)]
extern "C" {
  pub fn bsl_get_node(bsl: *mut bsl_t, key: *const c_char) -> *mut bsl_t;
}
#[allow(unused)]
extern "C" {
  pub fn bsl_iter_begin(it: *mut bsl_iter_t, bsl: *mut bsl_t);
}
#[allow(unused)]
extern "C" {
  pub fn bsl_iter_next(
    it: *mut bsl_iter_t,
    _type: *mut c_int,
    _key: *mut *const c_char,
    _val: *mut *mut c_void,
  ) -> bool;
}
